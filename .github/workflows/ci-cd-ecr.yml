name: CI/CD Pipeline with ECR

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  IMAGE_NAME: claude-to-azure-proxy
  NODE_VERSION: 22

jobs:
  # Code quality and security checks
  code-quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: Run linting
        run: pnpm run lint

      - name: Run type checking
        run: pnpm run type-check

      - name: Run tests
        run: pnpm run test:coverage

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        if: always()
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false

  # Environment security check
  env-security:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Check .env file security
        run: |
          if [ -f "scripts/security-check-env.sh" ]; then
            chmod +x scripts/security-check-env.sh
            ./scripts/security-check-env.sh
          else
            echo "‚ö†Ô∏è Security check script not found, skipping"
          fi

  # Dockerfile linting
  dockerfile-lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          failure-threshold: warning

  # Build Docker image and security scan
  build-and-scan:
    runs-on: ubuntu-latest
    needs: [code-quality, env-security, dockerfile-lint]
    permissions:
      contents: read
      security-events: write
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build Docker image for scanning
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          load: true

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: "sarif"
          output: "trivy-results.sarif"
          severity: "CRITICAL,HIGH,MEDIUM"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

      - name: Run Trivy vulnerability scanner summary
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: "table"
          severity: "CRITICAL,HIGH"

  # Container security and functionality tests
  container-tests:
    runs-on: ubuntu-latest
    needs: build-and-scan
    if: always() && needs.build-and-scan.result == 'success'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build test image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: false
          tags: test-image:latest
          load: true

      - name: Verify non-root user
        run: |
          USER_ID=$(docker run --rm test-image:latest id -u)
          if [ "$USER_ID" = "0" ]; then
            echo "‚ùå Container runs as root user"
            exit 1
          else
            echo "‚úÖ Container runs as non-root user (UID: $USER_ID)"
          fi

      - name: Test health check endpoint
        run: |
          # Start container
          CONTAINER_ID=$(docker run -d -p 8080:8080 \
            -e PROXY_API_KEY=test-proxy-api-key-32-characters-long \
            -e AZURE_OPENAI_ENDPOINT=https://test.openai.azure.com \
            -e AZURE_OPENAI_API_KEY=test-azure-openai-api-key-32-characters \
            -e AZURE_OPENAI_MODEL=test-model \
            test-image:latest)

          # Wait for container to start
          sleep 15

          # Check health endpoint
          if curl -f --silent --max-time 10 http://localhost:8080/health > /dev/null; then
            echo "‚úÖ Health check passed"
          else
            echo "‚ùå Health check failed"
            echo "Container logs:"
            docker logs $CONTAINER_ID
            exit 1
          fi

          # Cleanup
          docker stop $CONTAINER_ID
          docker rm $CONTAINER_ID

      - name: Check image efficiency
        run: |
          IMAGE_SIZE=$(docker image inspect test-image:latest --format='{{.Size}}')
          IMAGE_SIZE_MB=$((IMAGE_SIZE / 1024 / 1024))
          echo "üìè Image size: ${IMAGE_SIZE_MB} MB"

          LAYER_COUNT=$(docker history test-image:latest --format "{{.ID}}" | wc -l)
          echo "üìö Layer count: ${LAYER_COUNT}"

          if [ $IMAGE_SIZE_MB -gt 500 ]; then
            echo "‚ö†Ô∏è Image is larger than 500MB. Consider optimizing."
          else
            echo "‚úÖ Image size is reasonable"
          fi

  # Build and push to AWS ECR
  build-and-push-ecr:
    runs-on: ubuntu-latest
    needs: [build-and-scan, container-tests]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    permissions:
      contents: read
      id-token: write # Required for AWS STS

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials using STS
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: GitHubActions-ECR-Push
          aws-region: ${{ secrets.AWS_REGION }}
          role-duration-seconds: 3600

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata for ECR
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value={{date 'YYYY-MM-DD-HHmmss'}}

      - name: Build and push Docker image to ECR
        id: build-push
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Scan pushed image in ECR
        run: |
          # Get the image URI
          IMAGE_URI="${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY_NAME }}:${{ github.sha }}"

          # Start ECR image scan
          aws ecr start-image-scan \
            --repository-name ${{ secrets.ECR_REPOSITORY_NAME }} \
            --image-id imageTag=${{ github.sha }} \
            --region ${{ secrets.AWS_REGION }} || true

          echo "‚úÖ ECR image scan initiated for: $IMAGE_URI"

      - name: Output image details
        run: |
          echo "üöÄ Successfully pushed to ECR:"
          echo "Repository: ${{ secrets.ECR_REPOSITORY_NAME }}"
          echo "Region: ${{ secrets.AWS_REGION }}"
          echo "Tags: ${{ steps.meta.outputs.tags }}"
          echo "Digest: ${{ steps.build-push.outputs.digest }}"

  # Deployment notification
  deployment-ready:
    runs-on: ubuntu-latest
    needs: build-and-push-ecr
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Deployment ready notification
        run: |
          echo "üéâ Deployment Ready!"
          echo ""
          echo "üìã Build Summary:"
          echo "  ‚úÖ All tests passed"
          echo "  ‚úÖ Security scans completed"
          echo "  ‚úÖ Docker image pushed to ECR"
          echo ""
          echo "üöÄ Ready for deployment to:"
          echo "  - AWS App Runner"
          echo "  - AWS ECS"
          echo "  - AWS EKS"
          echo ""
          echo "üìç ECR Image:"
          echo "  Repository: ${{ secrets.ECR_REPOSITORY_NAME }}"
          echo "  Region: ${{ secrets.AWS_REGION }}"
          echo "  Latest Tag: ${{ github.sha }}"
