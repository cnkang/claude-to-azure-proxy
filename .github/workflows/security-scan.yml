name: Security Scan

on:
  schedule:
    # Run security scan daily at 3 AM UTC
    - cron: "0 3 * * *"
  workflow_dispatch: # Allow manual trigger

env:
  IMAGE_NAME: claude-to-azure-proxy
  REGISTRY: ghcr.io

jobs:
  security-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: read
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull latest image
        run: |
          docker pull ${{ env.REGISTRY }}/${{ github.repository }}:latest || {
            echo "‚ö†Ô∏è Latest image not found, building locally for scan"
            docker build -t ${{ env.REGISTRY }}/${{ github.repository }}:latest .
          }

      - name: Run comprehensive Trivy scan
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ${{ env.REGISTRY }}/${{ github.repository }}:latest
          format: "sarif"
          output: "trivy-results.sarif"
          severity: "UNKNOWN,LOW,MEDIUM,HIGH,CRITICAL"

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

      - name: Run Trivy scan for summary
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ${{ env.REGISTRY }}/${{ github.repository }}:latest
          format: "table"
          severity: "HIGH,CRITICAL"

      - name: Scan for secrets in repository
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          extra_args: --debug --only-verified --no-update

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Use Node.js 24
        uses: actions/setup-node@v6
        with:
          node-version: 24
          cache: "pnpm"

      - name: Check for dependency vulnerabilities
        run: |
          if [ -f "package.json" ]; then
            echo "üîç Checking for dependency vulnerabilities..."
            pnpm install
            pnpm audit --audit-level moderate || echo "‚ö†Ô∏è Found dependency vulnerabilities"
          fi

      - name: Security summary
        if: always()
        run: |
          echo "üîí Security scan completed"
          echo "üìä Check the Security tab for detailed results"
          echo "üîç Trivy results uploaded to GitHub Security"
          echo "üïµÔ∏è Secret scan completed"
          echo "üì¶ Dependency audit completed"