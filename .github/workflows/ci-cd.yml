name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    tags: ["v*"]
  pull_request:
    branches: [main]

env:
  IMAGE_NAME: claude-to-azure-proxy
  NODE_VERSION: 22

jobs:
  # Code quality and security checks
  code-quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: Run linting
        run: pnpm run lint

      - name: Run type checking
        run: pnpm run type-check

      - name: Run tests
        run: pnpm run test:coverage

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        if: always()
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false

  # Security checks
  security-checks:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Hadolint (Dockerfile linting)
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          failure-threshold: warning

      - name: Check environment security
        run: |
          if [ -f "scripts/security-check-env.sh" ]; then
            chmod +x scripts/security-check-env.sh
            ./scripts/security-check-env.sh
          else
            echo "‚ö†Ô∏è Security check script not found, skipping"
          fi

  # Build and scan Docker image
  build-and-scan:
    runs-on: ubuntu-latest
    needs: [code-quality, security-checks]
    permissions:
      contents: read
      security-events: write
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: false
          tags: |
            ${{ steps.meta.outputs.tags }}
            ${{ env.IMAGE_NAME }}:${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          load: true

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: "sarif"
          output: "trivy-results.sarif"
          severity: "CRITICAL,HIGH,MEDIUM"

      - name: Check if SARIF file exists
        id: check-sarif
        run: |
          if [ -f "trivy-results.sarif" ]; then
            echo "sarif-exists=true" >> $GITHUB_OUTPUT
          else
            echo "sarif-exists=false" >> $GITHUB_OUTPUT
            echo "SARIF file not found, skipping upload"
          fi

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always() && steps.check-sarif.outputs.sarif-exists == 'true'
        with:
          sarif_file: "trivy-results.sarif"

      - name: Run Trivy summary scan
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: "table"
          severity: "CRITICAL,HIGH"

  # Container functionality tests
  container-tests:
    runs-on: ubuntu-latest
    needs: build-and-scan
    if: always() && needs.build-and-scan.result == 'success'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build test image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: false
          tags: test-image:latest
          load: true

      - name: Verify non-root user
        run: |
          USER_ID=$(docker run --rm test-image:latest id -u)
          if [ "$USER_ID" = "0" ]; then
            echo "‚ùå Container runs as root user"
            exit 1
          else
            echo "‚úÖ Container runs as non-root user (UID: $USER_ID)"
          fi

      - name: Test health check endpoint
        run: |
          # Start container
          CONTAINER_ID=$(docker run -d -p 8080:8080 \
            -e PROXY_API_KEY=test-proxy-api-key-32-characters-long \
            -e AZURE_OPENAI_ENDPOINT=https://test.openai.azure.com \
            -e AZURE_OPENAI_API_KEY=test-azure-openai-api-key-32-characters \
            -e AZURE_OPENAI_MODEL=test-model \
            test-image:latest)

          # Wait for container to start
          sleep 15

          # Check health endpoint
          if curl -f --silent --max-time 10 http://localhost:8080/health > /dev/null; then
            echo "‚úÖ Health check passed"
          else
            echo "‚ùå Health check failed"
            echo "Container logs:"
            docker logs $CONTAINER_ID
            exit 1
          fi

          # Cleanup
          docker stop $CONTAINER_ID
          docker rm $CONTAINER_ID

      - name: Check image efficiency
        run: |
          IMAGE_SIZE=$(docker image inspect test-image:latest --format='{{.Size}}')
          IMAGE_SIZE_MB=$((IMAGE_SIZE / 1024 / 1024))
          echo "üìè Image size: ${IMAGE_SIZE_MB} MB"

          LAYER_COUNT=$(docker history test-image:latest --format "{{.ID}}" | wc -l)
          echo "üìö Layer count: ${LAYER_COUNT}"

          if [ $IMAGE_SIZE_MB -gt 500 ]; then
            echo "‚ö†Ô∏è Image is larger than 500MB. Consider optimizing."
          else
            echo "‚úÖ Image size is reasonable"
          fi

  # Push to GitHub Container Registry (always for main/develop)
  push-ghcr:
    runs-on: ubuntu-latest
    needs: [build-and-scan, container-tests]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/tags/v'))
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata for GHCR
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push to GHCR
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Push to AWS ECR (optional, requires secrets)
  push-ecr:
    runs-on: ubuntu-latest
    needs: [build-and-scan, container-tests]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/tags/v'))
    continue-on-error: true  # Don't fail the entire workflow if ECR push fails
    permissions:
      contents: read
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check AWS secrets
        id: check-aws
        run: |
          if [ -n "${{ secrets.AWS_ROLE_ARN }}" ] && [ -n "${{ secrets.AWS_REGION }}" ] && [ -n "${{ secrets.ECR_REPOSITORY_NAME }}" ]; then
            echo "aws-configured=true" >> $GITHUB_OUTPUT
          else
            echo "aws-configured=false" >> $GITHUB_OUTPUT
            echo "AWS secrets not configured, skipping ECR push"
          fi

      - name: Configure AWS credentials
        if: steps.check-aws.outputs.aws-configured == 'true'
        id: aws-config
        continue-on-error: true
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: GitHubActions-${{ github.run_id }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-duration-seconds: 3600

      - name: Check AWS configuration result
        if: steps.check-aws.outputs.aws-configured == 'true'
        id: aws-ready
        run: |
          if [ "${{ steps.aws-config.outcome }}" = "success" ]; then
            echo "aws-ready=true" >> $GITHUB_OUTPUT
            echo "‚úÖ AWS credentials configured successfully"
          else
            echo "aws-ready=false" >> $GITHUB_OUTPUT
            echo "‚ö†Ô∏è AWS credentials configuration failed, skipping ECR operations"
          fi

      - name: Login to Amazon ECR
        if: steps.aws-ready.outputs.aws-ready == 'true'
        id: login-ecr
        continue-on-error: true
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata for ECR
        if: steps.aws-ready.outputs.aws-ready == 'true' && steps.login-ecr.outcome == 'success'
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY_NAME }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push to ECR
        if: steps.aws-ready.outputs.aws-ready == 'true' && steps.login-ecr.outcome == 'success' && steps.meta.outcome == 'success'
        id: build-push
        continue-on-error: true
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Start ECR image scan
        if: steps.build-push.outcome == 'success'
        continue-on-error: true
        run: |
          IMAGE_TAG=$(echo "${{ github.ref }}" | sed 's/refs\/heads\///g' | sed 's/refs\/tags\///g')
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            IMAGE_TAG="latest"
          fi

          echo "Starting ECR scan for tag: $IMAGE_TAG"
          aws ecr start-image-scan \
            --repository-name ${{ secrets.ECR_REPOSITORY_NAME }} \
            --image-id imageTag=$IMAGE_TAG \
            --region ${{ secrets.AWS_REGION }} || true

      - name: Output ECR deployment info
        if: steps.build-push.outcome == 'success'
        run: |
          echo "ÔøΩ  Successfully pushed to ECR!"
          echo "üìç Repository: ${{ secrets.ECR_REPOSITORY_NAME }}"
          echo "üìç Region: ${{ secrets.AWS_REGION }}"
          echo "üìç Tags: ${{ steps.meta.outputs.tags }}"

      - name: ECR deployment summary
        if: always()
        run: |
          if [ "${{ steps.check-aws.outputs.aws-configured }}" != "true" ]; then
            echo "‚ÑπÔ∏è AWS ECR push skipped - AWS secrets not configured"
          elif [ "${{ steps.aws-config.outcome }}" != "success" ]; then
            echo "‚ö†Ô∏è AWS ECR push skipped - AWS credentials configuration failed"
          elif [ "${{ steps.login-ecr.outcome }}" != "success" ]; then
            echo "‚ö†Ô∏è AWS ECR push skipped - ECR login failed"
          elif [ "${{ steps.build-push.outcome }}" == "success" ]; then
            echo "‚úÖ AWS ECR push completed successfully"
          else
            echo "‚ö†Ô∏è AWS ECR push failed but workflow continues"
          fi

  # Deployment summary
  deployment-summary:
    runs-on: ubuntu-latest
    needs: [push-ghcr, push-ecr]
    if: always() && github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Deployment status summary
        run: |
          echo "üéâ CI/CD Pipeline Completed!"
          echo ""
          echo "üìã Results Summary:"
          echo "  ‚úÖ Code quality checks passed"
          echo "  ‚úÖ Security scans completed"
          echo "  ‚úÖ Container tests passed"
          
          # GitHub Container Registry is required
          if [ "${{ needs.push-ghcr.result }}" = "success" ]; then
            echo "  ‚úÖ Pushed to GitHub Container Registry"
          else
            echo "  ‚ùå GitHub Container Registry push failed"
            exit 1
          fi
          
          # AWS ECR is optional
          if [ "${{ needs.push-ecr.result }}" = "success" ]; then
            echo "  ‚úÖ Pushed to AWS ECR"
          elif [ "${{ needs.push-ecr.result }}" = "skipped" ]; then
            echo "  ‚ÑπÔ∏è AWS ECR push skipped (AWS not configured)"
          else
            echo "  ‚ö†Ô∏è AWS ECR push failed (but pipeline continues)"
          fi
          
          echo ""
          echo "üöÄ Ready for deployment!"
          echo ""
          echo "üì¶ Available images:"
          echo "  ‚Ä¢ GitHub Container Registry: ghcr.io/${{ github.repository }}:latest"
          if [ "${{ needs.push-ecr.result }}" = "success" ]; then
            echo "  ‚Ä¢ AWS ECR: Available in configured repository"
          fi