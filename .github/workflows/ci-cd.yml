name: CI/CD Pipeline

# Build Once, Push Twice Strategy:
# 1. Build and test on amd64 for fast feedback
# 2. Build multi-platform image once with registry cache
# 3. Push same image to GHCR and ECR in parallel
# 4. Use registry cache to avoid rebuilding layers

on:
  push:
    branches: [main, develop]
    tags: ["v*"]
  pull_request:
    branches: [main]

env:
  IMAGE_NAME: claude-to-azure-proxy
  NODE_VERSION: 22

jobs:
  # Code quality and security checks
  code-quality:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: Run linting
        run: pnpm run lint

      - name: Run type checking
        run: pnpm run type-check

      - name: Run tests
        run: pnpm run test:coverage

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        if: always()
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false

  # Security checks
  security-checks:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Hadolint (Dockerfile linting)
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          failure-threshold: warning

      - name: Check environment security
        run: |
          if [ -f "scripts/security-check-env.sh" ]; then
            chmod +x scripts/security-check-env.sh
            ./scripts/security-check-env.sh
          else
            echo "⚠️ Security check script not found, skipping"
          fi

  # Build, scan and test Docker image (single build)
  build-scan-test:
    runs-on: ubuntu-latest
    needs: [code-quality, security-checks]
    permissions:
      contents: read
      security-events: write
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Load amd64 image for testing
        run: |
          echo "📥 Building amd64 image for testing..."
          # Build only amd64 image for testing
          docker buildx build \
            --platform linux/amd64 \
            --load \
            --tag ${{ env.IMAGE_NAME }}:test \
            --cache-from type=gha \
            .
          echo "✅ amd64 image loaded for testing"

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ${{ env.IMAGE_NAME }}:test
          format: "sarif"
          output: "trivy-results.sarif"
          severity: "CRITICAL,HIGH,MEDIUM"

      - name: Check if SARIF file exists
        id: check-sarif
        run: |
          if [ -f "trivy-results.sarif" ]; then
            echo "sarif-exists=true" >> $GITHUB_OUTPUT
          else
            echo "sarif-exists=false" >> $GITHUB_OUTPUT
            echo "SARIF file not found, skipping upload"
          fi

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always() && steps.check-sarif.outputs.sarif-exists == 'true'
        with:
          sarif_file: "trivy-results.sarif"

      - name: Run Trivy summary scan
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ${{ env.IMAGE_NAME }}:test
          format: "table"
          severity: "CRITICAL,HIGH"

      - name: Verify non-root user
        run: |
          USER_ID=$(docker run --rm ${{ env.IMAGE_NAME }}:test id -u)
          if [ "$USER_ID" = "0" ]; then
            echo "❌ Container runs as root user"
            exit 1
          else
            echo "✅ Container runs as non-root user (UID: $USER_ID)"
          fi

      - name: Test health check endpoint
        run: |
          # Start container
          CONTAINER_ID=$(docker run -d -p 8080:8080 \
            -e PROXY_API_KEY=test-proxy-api-key-32-characters-long \
            -e AZURE_OPENAI_ENDPOINT=https://test.openai.azure.com \
            -e AZURE_OPENAI_API_KEY=test-azure-openai-api-key-32-characters \
            -e AZURE_OPENAI_MODEL=test-model \
            ${{ env.IMAGE_NAME }}:test)

          # Wait for container to start
          sleep 15

          # Check health endpoint
          if curl -f --silent --max-time 10 http://localhost:8080/health > /dev/null; then
            echo "✅ Health check passed"
          else
            echo "❌ Health check failed"
            echo "Container logs:"
            docker logs $CONTAINER_ID
            exit 1
          fi

          # Cleanup
          docker stop $CONTAINER_ID
          docker rm $CONTAINER_ID

      - name: Check image efficiency
        run: |
          IMAGE_SIZE=$(docker image inspect ${{ env.IMAGE_NAME }}:test --format='{{.Size}}')
          IMAGE_SIZE_MB=$((IMAGE_SIZE / 1024 / 1024))
          echo "📏 Image size: ${IMAGE_SIZE_MB} MB"

          LAYER_COUNT=$(docker history ${{ env.IMAGE_NAME }}:test --format "{{.ID}}" | wc -l)
          echo "📚 Layer count: ${LAYER_COUNT}"

          if [ $IMAGE_SIZE_MB -gt 500 ]; then
            echo "⚠️ Image is larger than 500MB. Consider optimizing."
          else
            echo "✅ Image size is reasonable"
          fi

  # Build multi-platform image once for both registries
  build-multiplatform:
    runs-on: ubuntu-latest
    needs: [build-scan-test]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/tags/v'))
    permissions:
      contents: read
      packages: write
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      ghcr-tags: ${{ steps.ghcr-meta.outputs.tags }}
      ghcr-labels: ${{ steps.ghcr-meta.outputs.labels }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for GHCR
        id: ghcr-meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push to GHCR (primary registry)
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.ghcr-meta.outputs.tags }}
          labels: ${{ steps.ghcr-meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Push to GitHub Container Registry (already done in build-multiplatform)
  push-ghcr:
    runs-on: ubuntu-latest
    needs: [build-multiplatform]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/tags/v'))

    steps:
      - name: GHCR push completed
        run: |
          echo "✅ Multi-platform image already pushed to GHCR"
          echo "📦 Tags: ${{ needs.build-multiplatform.outputs.ghcr-tags }}"
          echo "🔍 Digest: ${{ needs.build-multiplatform.outputs.image-digest }}"

  # Push to AWS ECR (copy from GHCR using registry cache)
  push-ecr:
    runs-on: ubuntu-latest
    needs: [build-multiplatform]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/tags/v'))
    continue-on-error: true # Don't fail the entire workflow if ECR push fails
    permissions:
      contents: read
      id-token: write
      packages: read

    steps:
      - name: Check AWS secrets
        id: check-aws
        run: |
          if [ -n "${{ secrets.AWS_ROLE_ARN }}" ] && [ -n "${{ secrets.AWS_REGION }}" ] && [ -n "${{ secrets.ECR_REPOSITORY_NAME }}" ]; then
            echo "aws-configured=true" >> $GITHUB_OUTPUT
          else
            echo "aws-configured=false" >> $GITHUB_OUTPUT
            echo "AWS secrets not configured, skipping ECR push"
          fi

      - name: Set up Docker Buildx
        if: steps.check-aws.outputs.aws-configured == 'true'
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry (for source)
        if: steps.check-aws.outputs.aws-configured == 'true'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure AWS credentials
        if: steps.check-aws.outputs.aws-configured == 'true'
        id: aws-config
        continue-on-error: true
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: GitHubActions-${{ github.run_id }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-duration-seconds: 3600

      - name: Check AWS configuration result
        if: steps.check-aws.outputs.aws-configured == 'true'
        id: aws-ready
        run: |
          if [ "${{ steps.aws-config.outcome }}" = "success" ]; then
            echo "aws-ready=true" >> $GITHUB_OUTPUT
            echo "✅ AWS credentials configured successfully"
          else
            echo "aws-ready=false" >> $GITHUB_OUTPUT
            echo "⚠️ AWS credentials configuration failed, skipping ECR operations"
            echo ""
            echo "🔍 Debugging information:"
            echo "  • Role ARN: ${{ secrets.AWS_ROLE_ARN }}"
            echo "  • Region: ${{ secrets.AWS_REGION }}"
            echo "  • Repository: ${{ github.repository }}"
            echo "  • Ref: ${{ github.ref }}"
            echo "  • Actor: ${{ github.actor }}"
            echo ""
            echo "💡 Common causes of OIDC failures:"
            echo "  1. Trust policy doesn't match repository: ${{ github.repository }}"
            echo "  2. Trust policy doesn't allow branch: ${{ github.ref }}"
            echo "  3. OIDC provider not configured in AWS account"
            echo "  4. Role permissions insufficient"
            echo ""
            echo "🔧 To fix this issue:"
            echo "  1. Verify the IAM role trust policy includes:"
            echo "     - Condition: StringEquals 'token.actions.githubusercontent.com:sub': 'repo:${{ github.repository }}:ref:${{ github.ref }}'"
            echo "  2. Ensure OIDC provider exists: token.actions.githubusercontent.com"
            echo "  3. Check role has ECR permissions: ecr:GetAuthorizationToken, ecr:BatchCheckLayerAvailability, etc."
          fi

      - name: Login to Amazon ECR
        if: steps.aws-ready.outputs.aws-ready == 'true'
        id: login-ecr
        continue-on-error: true
        uses: aws-actions/amazon-ecr-login@v2

      - name: Extract metadata for ECR
        if: steps.aws-ready.outputs.aws-ready == 'true' && steps.login-ecr.outcome == 'success'
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY_NAME }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Copy multi-platform image from GHCR to ECR
        if: steps.aws-ready.outputs.aws-ready == 'true' && steps.login-ecr.outcome == 'success' && steps.meta.outcome == 'success'
        id: build-push
        continue-on-error: true
        run: |
          echo "🔄 Copying multi-platform image from GHCR to ECR..."
          
          # Get the source image from GHCR (use latest tag for simplicity)
          SOURCE_IMAGE="ghcr.io/${{ github.repository }}:latest"
          
          # Copy to all ECR tags
          IFS=',' read -ra TAGS <<< "${{ steps.meta.outputs.tags }}"
          for tag in "${TAGS[@]}"; do
            tag=$(echo "$tag" | xargs)
            echo "Copying: $SOURCE_IMAGE -> $tag"
            docker buildx imagetools create \
              --tag "$tag" \
              "$SOURCE_IMAGE"
          done
          
          echo "🚀 Successfully copied multi-platform image to ECR!"
          echo "📦 Copied platforms: linux/amd64, linux/arm64"

      - name: Start ECR image scan
        if: steps.build-push.outcome == 'success'
        continue-on-error: true
        run: |
          IMAGE_TAG=$(echo "${{ github.ref }}" | sed 's/refs\/heads\///g' | sed 's/refs\/tags\///g')
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            IMAGE_TAG="latest"
          fi

          echo "Starting ECR scan for tag: $IMAGE_TAG"
          aws ecr start-image-scan \
            --repository-name ${{ secrets.ECR_REPOSITORY_NAME }} \
            --image-id imageTag=$IMAGE_TAG \
            --region ${{ secrets.AWS_REGION }} || true

      - name: Output ECR deployment info
        if: steps.build-push.outcome == 'success'
        run: |
          echo "�  Successfully pushed to ECR!"
          echo "📍 Repository: ${{ secrets.ECR_REPOSITORY_NAME }}"
          echo "📍 Region: ${{ secrets.AWS_REGION }}"
          echo "📍 Tags: ${{ steps.meta.outputs.tags }}"

      - name: ECR deployment summary
        if: always()
        run: |
          if [ "${{ steps.check-aws.outputs.aws-configured }}" != "true" ]; then
            echo "ℹ️ AWS ECR push skipped - AWS secrets not configured"
          elif [ "${{ steps.aws-config.outcome }}" != "success" ]; then
            echo "⚠️ AWS ECR push skipped - AWS credentials configuration failed"
          elif [ "${{ steps.login-ecr.outcome }}" != "success" ]; then
            echo "⚠️ AWS ECR push skipped - ECR login failed"
          elif [ "${{ steps.build-push.outcome }}" == "success" ]; then
            echo "✅ AWS ECR push completed successfully"
          else
            echo "⚠️ AWS ECR push failed but workflow continues"
          fi

  # Deployment summary
  deployment-summary:
    runs-on: ubuntu-latest
    needs: [build-multiplatform, push-ghcr, push-ecr]
    if: always() && github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: Deployment status summary
        run: |
          echo "🎉 CI/CD Pipeline Completed!"
          echo ""
          echo "📋 Results Summary:"
          echo "  ✅ Code quality checks passed"
          echo "  ✅ Security scans completed"
          echo "  ✅ Container tests passed"

          # GitHub Container Registry is required
          if [ "${{ needs.push-ghcr.result }}" = "success" ]; then
            echo "  ✅ Pushed to GitHub Container Registry"
          else
            echo "  ❌ GitHub Container Registry push failed"
            exit 1
          fi

          # AWS ECR is optional
          if [ "${{ needs.push-ecr.result }}" = "success" ]; then
            echo "  ✅ Pushed to AWS ECR"
          elif [ "${{ needs.push-ecr.result }}" = "skipped" ]; then
            echo "  ℹ️ AWS ECR push skipped (AWS not configured)"
          else
            echo "  ⚠️ AWS ECR push failed (but pipeline continues)"
          fi

          echo ""
          echo "🚀 Ready for deployment!"
          echo ""
          echo "📦 Available images:"
          echo "  • GitHub Container Registry: ghcr.io/${{ github.repository }}:latest"
          if [ "${{ needs.push-ecr.result }}" = "success" ]; then
            echo "  • AWS ECR: Available in configured repository"
          fi
