name: Docker Security Scan

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  schedule:
    # Run security scan weekly on Sundays at 2 AM UTC
    - cron: "0 2 * * 0"

env:
  IMAGE_NAME: claude-to-azure-proxy
  REGISTRY: ghcr.io

jobs:
  security-scan:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      security-events: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check .env file security
        run: |
          chmod +x scripts/security-check-env.sh
          ./scripts/security-check-env.sh

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          load: true

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ${{ env.REGISTRY }}/${{ github.repository }}:latest
          format: "sarif"
          output: "trivy-results.sarif"
          severity: "CRITICAL,HIGH,MEDIUM"

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

      - name: Run Trivy vulnerability scanner (table format)
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ${{ env.REGISTRY }}/${{ github.repository }}:latest
          format: "table"
          severity: "CRITICAL,HIGH"

      - name: Verify non-root user
        run: |
          USER_ID=$(docker run --rm ${{ env.REGISTRY }}/${{ github.repository }}:latest id -u)
          if [ "$USER_ID" = "0" ]; then
            echo "‚ùå Container runs as root user"
            exit 1
          else
            echo "‚úÖ Container runs as non-root user (UID: $USER_ID)"
          fi

      - name: Test health check
        run: |
          # Start container
          CONTAINER_ID=$(docker run -d -p 8080:8080 \
            -e PROXY_API_KEY=test-proxy-api-key-32-characters-long \
            -e AZURE_OPENAI_ENDPOINT=https://test.openai.azure.com \
            -e AZURE_OPENAI_API_KEY=test-azure-openai-api-key-32-characters \
            -e AZURE_OPENAI_MODEL=test-model \
            ${{ env.REGISTRY }}/${{ github.repository }}:latest)

          # Wait for container to start
          sleep 15

          # Check health
          if docker exec $CONTAINER_ID wget --quiet --tries=1 --spider http://localhost:8080/health; then
            echo "‚úÖ Health check passed"
          else
            echo "‚ùå Health check failed"
            docker logs $CONTAINER_ID
            exit 1
          fi

          # Cleanup
          docker stop $CONTAINER_ID
          docker rm $CONTAINER_ID

      - name: Check image size
        run: |
          IMAGE_SIZE=$(docker image inspect ${{ env.REGISTRY }}/${{ github.repository }}:latest --format='{{.Size}}')
          IMAGE_SIZE_MB=$((IMAGE_SIZE / 1024 / 1024))
          echo "üìè Image size: ${IMAGE_SIZE_MB} MB"

          if [ $IMAGE_SIZE_MB -gt 500 ]; then
            echo "‚ö†Ô∏è Image is larger than 500MB. Consider optimizing."
          else
            echo "‚úÖ Image size is reasonable"
          fi

      - name: Push Docker image
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  hadolint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: Dockerfile
          failure-threshold: warning
