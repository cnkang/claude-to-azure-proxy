echo "📝 Validating commit message..."

# Read the commit message
commit_message=$(cat "$1")

# Check if commit message follows conventional commits format
if ! echo "$commit_message" | grep -qE "^(feat|fix|docs|style|refactor|test|chore|perf|ci|build|revert)(\(.+\))?: .{1,50}"; then
  echo "❌ Invalid commit message format!"
  echo ""
  echo "📋 Commit message should follow conventional commits format:"
  echo "   <type>[optional scope]: <description>"
  echo ""
  echo "🏷️  Valid types:"
  echo "   feat:     A new feature"
  echo "   fix:      A bug fix"
  echo "   docs:     Documentation only changes"
  echo "   style:    Changes that do not affect the meaning of the code"
  echo "   refactor: A code change that neither fixes a bug nor adds a feature"
  echo "   test:     Adding missing tests or correcting existing tests"
  echo "   chore:    Changes to the build process or auxiliary tools"
  echo "   perf:     A code change that improves performance"
  echo "   ci:       Changes to CI configuration files and scripts"
  echo "   build:    Changes that affect the build system or external dependencies"
  echo "   revert:   Reverts a previous commit"
  echo ""
  echo "📝 Examples:"
  echo "   feat: add user authentication"
  echo "   fix(api): resolve timeout issue in completions endpoint"
  echo "   docs: update deployment instructions"
  echo "   test(auth): add unit tests for authentication middleware"
  echo ""
  exit 1
fi

# Check commit message length
if [ ${#commit_message} -gt 72 ]; then
  echo "⚠️  Commit message is longer than 72 characters (${#commit_message} chars)"
  echo "💡 Consider making it more concise for better readability"
fi

# Check for breaking changes
if echo "$commit_message" | grep -q "BREAKING CHANGE"; then
  echo "🚨 Breaking change detected in commit message"
  echo "📋 Make sure to update version accordingly and document the changes"
fi

echo "✅ Commit message format is valid!"