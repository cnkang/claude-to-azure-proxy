name: Build and Push to ECR

on:
  push:
    branches: [main, develop]
    tags: ["v*"]
  pull_request:
    branches: [main]

env:
  IMAGE_NAME: claude-to-azure-proxy
  NODE_VERSION: 22

jobs:
  # Run tests and quality checks
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install pnpm
        uses: pnpm/action-setup@v4

      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "pnpm"

      - name: Install dependencies
        run: pnpm install

      - name: Run linting
        run: pnpm run lint

      - name: Run type checking
        run: pnpm run type-check

      - name: Run tests
        run: pnpm run test:coverage

      - name: Upload coverage
        uses: codecov/codecov-action@v4
        if: always()
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false

  # Build and scan Docker image
  build:
    runs-on: ubuntu-latest
    needs: test
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          load: true

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: "sarif"
          output: "trivy-results.sarif"

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

      - name: Test container
        run: |
          # Start container for testing
          CONTAINER_ID=$(docker run -d -p 8080:8080 \
            -e PROXY_API_KEY=test-proxy-api-key-32-characters-long \
            -e AZURE_OPENAI_ENDPOINT=https://test.openai.azure.com \
            -e AZURE_OPENAI_API_KEY=test-azure-openai-api-key-32-characters \
            -e AZURE_OPENAI_MODEL=test-model \
            ${{ env.IMAGE_NAME }}:${{ github.sha }})

          # Wait for startup
          sleep 15

          # Test health endpoint
          if curl -f --silent --max-time 10 http://localhost:8080/health > /dev/null; then
            echo "‚úÖ Health check passed"
          else
            echo "‚ùå Health check failed"
            docker logs $CONTAINER_ID
            exit 1
          fi

          # Cleanup
          docker stop $CONTAINER_ID
          docker rm $CONTAINER_ID

  # Push to AWS ECR
  push-ecr:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/tags/v'))
    permissions:
      contents: read
      id-token: write # Required for AWS STS

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: GitHubActions-${{ github.run_id }}
          aws-region: ${{ secrets.AWS_REGION }}
          role-duration-seconds: 3600

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata for ECR
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY_NAME }}
          tags: |
            type=ref,event=branch
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value={{date 'YYYY-MM-DD-HHmmss'}}

      - name: Build and push to ECR
        id: build-push
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Start ECR image scan
        run: |
          # Extract the image tag for scanning
          IMAGE_TAG=$(echo "${{ github.ref }}" | sed 's/refs\/heads\///g' | sed 's/refs\/tags\///g')
          if [ "${{ github.ref }}" = "refs/heads/main" ]; then
            IMAGE_TAG="latest"
          fi

          echo "Starting ECR scan for tag: $IMAGE_TAG"
          aws ecr start-image-scan \
            --repository-name ${{ secrets.ECR_REPOSITORY_NAME }} \
            --image-id imageTag=$IMAGE_TAG \
            --region ${{ secrets.AWS_REGION }} || true

      - name: Output deployment info
        run: |
          echo "üöÄ Successfully pushed to ECR!"
          echo ""
          echo "üìç Repository: ${{ secrets.ECR_REPOSITORY_NAME }}"
          echo "üìç Region: ${{ secrets.AWS_REGION }}"
          echo "üìç Registry: ${{ steps.login-ecr.outputs.registry }}"
          echo "üìç Tags: ${{ steps.meta.outputs.tags }}"
          echo "üìç Digest: ${{ steps.build-push.outputs.digest }}"
          echo ""
          echo "üîß Deploy commands:"
          echo "# Pull image:"
          echo "docker pull ${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY_NAME }}:latest"
          echo ""
          echo "# App Runner deployment:"
          echo "aws apprunner create-service --source-configuration ImageRepository={ImageIdentifier=${{ steps.login-ecr.outputs.registry }}/${{ secrets.ECR_REPOSITORY_NAME }}:latest,ImageConfiguration={Port=8080},AutoDeploymentsEnabled=true}"

  # Notify on success
  notify:
    runs-on: ubuntu-latest
    needs: [test, build, push-ecr]
    if: always() && github.ref == 'refs/heads/main'
    steps:
      - name: Deployment status
        run: |
          if [ "${{ needs.push-ecr.result }}" = "success" ]; then
            echo "üéâ Deployment pipeline completed successfully!"
            echo "‚úÖ Tests passed"
            echo "‚úÖ Image built and scanned"
            echo "‚úÖ Pushed to ECR"
            echo ""
            echo "Ready for production deployment! üöÄ"
          else
            echo "‚ùå Deployment pipeline failed"
            echo "Test result: ${{ needs.test.result }}"
            echo "Build result: ${{ needs.build.result }}"
            echo "Push result: ${{ needs.push-ecr.result }}"
          fi
